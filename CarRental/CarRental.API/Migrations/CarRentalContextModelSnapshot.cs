// <auto-generated />
using System;
using CarRental.API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarRental.API.Migrations
{
    [DbContext(typeof(CarRentalContext))]
    partial class CarRentalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarRental.API.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55c1b270-2b89-481a-8efe-43e4c1d8a083"),
                            Brand = "Skoda",
                            Model = "Citigo",
                            PricePerDay = 59m
                        },
                        new
                        {
                            Id = new Guid("4027a68c-5cf7-4b07-9fbd-fdd2fec85e5c"),
                            Brand = "Opel",
                            Model = "Corsa",
                            PricePerDay = 89m
                        },
                        new
                        {
                            Id = new Guid("1399ac00-8d3c-40e6-82a6-218ad13613ba"),
                            Brand = "Skoda",
                            Model = "Fabia",
                            PricePerDay = 89m
                        },
                        new
                        {
                            Id = new Guid("5bf2ce55-2f36-426d-b6b8-1243532b7700"),
                            Brand = "Opel",
                            Model = "Astra",
                            PricePerDay = 109m
                        },
                        new
                        {
                            Id = new Guid("ce6cb2d4-a123-4958-82eb-96d13d961219"),
                            Brand = "Seat",
                            Model = "Leon",
                            PricePerDay = 109m
                        },
                        new
                        {
                            Id = new Guid("29c4e1e9-1689-4c3f-9546-2ba17c6f4219"),
                            Brand = "Volkswagen",
                            Model = "Passat",
                            PricePerDay = 149m
                        },
                        new
                        {
                            Id = new Guid("ae939b70-1834-4ece-8cda-182694c2b6e8"),
                            Brand = "Kia",
                            Model = "Sportage",
                            PricePerDay = 169m
                        },
                        new
                        {
                            Id = new Guid("28439609-b9a3-46c5-85d3-fa9de41b93c2"),
                            Brand = "BMW",
                            Model = "530",
                            PricePerDay = 229m
                        });
                });

            modelBuilder.Entity("CarRental.API.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01b1df53-aa1e-4de3-94e8-fc5db416d1ab"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1972, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Email = "jan.kowalski@gmail.com",
                            FirstName = "Jan",
                            LastName = "Kowalski",
                            PhoneNumber = "123456789"
                        },
                        new
                        {
                            Id = new Guid("b703b28b-f6a3-48a7-bc30-843e1432067f"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1990, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Email = "piotr.nowak@gmail.com",
                            FirstName = "Piotr",
                            LastName = "Nowak",
                            PhoneNumber = "123456789"
                        },
                        new
                        {
                            Id = new Guid("0b52188f-6c5d-4b88-aaa9-bb0b977191b2"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1962, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Email = "w.mazur@gmail.com",
                            FirstName = "Wojciech",
                            LastName = "Mazur",
                            PhoneNumber = "123456789"
                        },
                        new
                        {
                            Id = new Guid("63c8753b-31a6-4cda-be54-344285573086"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1987, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Email = "a.zolc@gmail.com",
                            FirstName = "Artur",
                            LastName = "Żółć",
                            PhoneNumber = "123456789"
                        },
                        new
                        {
                            Id = new Guid("c89e32ee-b112-468f-8f35-47dd669c4476"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1969, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Email = "ryszard_malinowski@gmail.com",
                            FirstName = "Ryszard",
                            LastName = "Malinowski",
                            PhoneNumber = "123456789"
                        },
                        new
                        {
                            Id = new Guid("39d51b08-4175-4a35-83ef-764385e33b4a"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1992, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Email = "k.nowicki@gmail.com",
                            FirstName = "Kacper",
                            LastName = "Nowicki",
                            PhoneNumber = "123456789"
                        });
                });

            modelBuilder.Entity("CarRental.API.Entities.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DropOffDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DropOffLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("FullPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("PickUpDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PickUpLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ClientId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca96e8a7-2b4d-43af-90d1-09b701473c4c"),
                            CarId = new Guid("4027a68c-5cf7-4b07-9fbd-fdd2fec85e5c"),
                            ClientId = new Guid("0b52188f-6c5d-4b88-aaa9-bb0b977191b2"),
                            Discount = 0,
                            DropOffDate = new DateTimeOffset(new DateTime(2020, 1, 27, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            DropOffLocation = "Warszawa, lotnisko Chopina",
                            FullPrice = 623m,
                            PickUpDate = new DateTimeOffset(new DateTime(2020, 1, 20, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            PickUpLocation = "Poznań, lotnisko Ławica"
                        });
                });

            modelBuilder.Entity("CarRental.API.Entities.Rental", b =>
                {
                    b.HasOne("CarRental.API.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.API.Entities.Client", "Client")
                        .WithMany("Rentals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
